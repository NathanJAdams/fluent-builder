import { AllUnionMembersAreIdentical, ArrayFixed, ArrayLengthWithoutRest, ArrayRest, AsArray, AsRequiredKeys, FilterByPartial, HasArrayRest, IsAllArray, IsAllObject, IsAllRecord, IsExact, IsIgnored, IsPartialMatch, IsUnion, IsValid, Keys, ObjectOrRecordKey, UnusedName, Values } from '../utility-types';

type ObjectA = { a: string; x: boolean; };
type ObjectA_Array = { a: string[]; z: boolean; };
type ObjectA_Restricted = { a: string; };
type ObjectA_Compatible = { a: string; x: boolean; b?: number; };
type ObjectA_Incompatible = { a: string; x: number; };
type ObjectA_C = { a: string; c: boolean; };

const _IsIgnored_any: IsIgnored<any> = true;
const _IsIgnored_anyMixed: IsIgnored<any | string[]> = true;
const _IsIgnored_undefined: IsIgnored<undefined> = true;
const _IsIgnored_undefinedMixed: IsIgnored<undefined | string[]> = true;
const _IsIgnored_unknown: IsIgnored<unknown> = true;
const _IsIgnored_unknownMixed: IsIgnored<unknown | string[]> = true;
const _IsIgnored_never: IsIgnored<never> = true;
const _IsIgnored_plainObject: IsIgnored<object> = true;
const _IsIgnored_plainObjectMixed: IsIgnored<object | string[]> = true;
const _IsIgnored_emptyObject: IsIgnored<{}> = true;
const _IsIgnored_emptyObjectMixed: IsIgnored<{} | string[]> = true;
const _IsIgnored_emptyTuple: IsIgnored<[]> = true;
const _IsIgnored_emptyTupleMixed: IsIgnored<[] | string[]> = true;
const _IsIgnored_boolean: IsIgnored<boolean> = false;
const _IsIgnored_booleanMixed: IsIgnored<boolean | string[]> = false;
const _IsIgnored_primitiveUnion: IsIgnored<boolean | string> = false;
const _IsIgnored_primitiveUnionMixed: IsIgnored<boolean | string | string[]> = false;
const _IsIgnored_object: IsIgnored<ObjectA> = false;
const _IsIgnored_objectUnion: IsIgnored<ObjectA | ObjectA_C> = false;
const _IsIgnored_objectUnionMixedNumber: IsIgnored<ObjectA | number> = false;
const _IsIgnored_objectUnionMixedString: IsIgnored<ObjectA | string> = false;
const _IsIgnored_tuple: IsIgnored<[number]> = false;
const _IsIgnored_tupleUnion: IsIgnored<[number] | [string]> = false;
const _IsIgnored_array: IsIgnored<number[]> = false;
const _IsIgnored_arrayUnion: IsIgnored<number[] | string[]> = false;
const _IsIgnored_readonlyArray: IsIgnored<readonly number[]> = false;
const _IsIgnored_readonlyArrayUnion: IsIgnored<readonly number[] | readonly string[]> = false;
const _IsIgnored_mixedArrayUnion: IsIgnored<number[] | readonly string[]> = false;
const _IsIgnored_mixedArrayUnion2: IsIgnored<number | string[]> = false;
const _IsIgnored_record: IsIgnored<Record<ObjectOrRecordKey, any>> = false;
const _IsIgnored_recordUnionAll: IsIgnored<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_C>> = false;
const _IsIgnored_recordUnionCompatible: IsIgnored<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_Compatible>> = false;
const _IsIgnored_recordUnionSomeNumber: IsIgnored<Record<ObjectOrRecordKey, ObjectA> | number> = false;
const _IsIgnored_recordUnionSomeString: IsIgnored<Record<ObjectOrRecordKey, ObjectA> | string> = false;

const _IsUnion_object: IsUnion<ObjectA> = false;
const _IsUnion_objectUnion: IsUnion<ObjectA | ObjectA_C> = true;
const _IsUnion_objectUnionMixedNumber: IsUnion<ObjectA | number> = true;
const _IsUnion_objectUnionMixedString: IsUnion<ObjectA | string> = true;
const _IsUnion_tuple: IsUnion<[number]> = false;
const _IsUnion_tupleUnion: IsUnion<[number] | [string]> = true;
const _IsUnion_array: IsUnion<number[]> = false;
const _IsUnion_arrayUnion: IsUnion<number[] | string[]> = true;
const _IsUnion_readonlyArray: IsUnion<readonly number[]> = false;
const _IsUnion_readonlyArrayUnion: IsUnion<readonly number[] | readonly string[]> = true;
const _IsUnion_record: IsUnion<Record<ObjectOrRecordKey, any>> = false;
const _IsUnion_recordUnionAll: IsUnion<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_C>> = true;
// @ts-expect-error Expected to fail as typescript collapses compatible types before IsUnion sees it
const _IsUnion_recordUnionCompatible: IsUnion<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_Compatible>> = true;
const _IsUnion_recordUnionSomeNumber: IsUnion<Record<ObjectOrRecordKey, ObjectA> | number> = true;
const _IsUnion_recordUnionSomeString: IsUnion<Record<ObjectOrRecordKey, ObjectA> | string> = true;

const _IsAllArray_object: IsAllArray<ObjectA> = false;
const _IsAllArray_objectUnion: IsAllArray<ObjectA | ObjectA_C> = false;
const _IsAllArray_objectUnionMixedNumber: IsAllArray<ObjectA | number> = false;
const _IsAllArray_objectUnionMixedString: IsAllArray<ObjectA | string[]> = false;
const _IsAllArray_tuple: IsAllArray<[number]> = true;
const _IsAllArray_tupleUnionIdentical: IsAllArray<[number] | [number]> = true;
const _IsAllArray_tupleUnion: IsAllArray<[number] | [string]> = true;
const _IsAllArray_array: IsAllArray<number[]> = true;
const _IsAllArray_arrayUnion: IsAllArray<number[] | string[]> = true;
const _IsAllArray_arrayUnionIdentical: IsAllArray<number[] | number[]> = true;
const _IsAllArray_readonlyArray: IsAllArray<readonly number[]> = true;
const _IsAllArray_readonlyArrayUnion: IsAllArray<readonly number[] | readonly string[]> = true;
const _IsAllArray_mixedArrayUnion: IsAllArray<number[] | readonly string[]> = true;
const _IsAllArray_mixedArrayUnion2: IsAllArray<number | string[]> = false;
const _IsAllArray_record: IsAllArray<Record<ObjectOrRecordKey, any>> = false;
const _IsAllArray_recordUnionAll: IsAllArray<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_C>> = false;
const _IsAllArray_recordUnionCompatible: IsAllArray<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_Compatible>> = false;
const _IsAllArray_recordUnionSomeNumber: IsAllArray<Record<ObjectOrRecordKey, ObjectA> | number[]> = false;
const _IsAllArray_recordUnionSomeString: IsAllArray<Record<ObjectOrRecordKey, ObjectA> | string[]> = false;

const _IsAllObject_object: IsAllObject<ObjectA> = true;
const _IsAllObject_objectUnion: IsAllObject<ObjectA | ObjectA_C> = true;
const _IsAllObject_objectUnionMixedNumber: IsAllObject<ObjectA | number> = false;
const _IsAllObject_objectUnionMixedString: IsAllObject<ObjectA | string> = false;
const _IsAllObject_tuple: IsAllObject<[number]> = false;
const _IsAllObject_tupleUnion: IsAllObject<[number] | [string]> = false;
const _IsAllObject_array: IsAllObject<number[]> = false;
const _IsAllObject_arrayUnion: IsAllObject<number[] | string[]> = false;
const _IsAllObject_readonlyArray: IsAllObject<readonly number[]> = false;
const _IsAllObject_readonlyArrayUnion: IsAllObject<readonly number[] | readonly string[]> = false;
const _IsAllObject_mixedArrayUnion: IsAllObject<number[] | readonly string[]> = false;
const _IsAllObject_mixedArrayUnion2: IsAllObject<number | string[]> = false;
const _IsAllObject_record: IsAllObject<Record<ObjectOrRecordKey, any>> = false;
const _IsAllObject_recordUnionAll: IsAllObject<Record<string, ObjectA> | Record<string, ObjectA_C>> = false;
const _IsAllObject_recordUnionCompatible: IsAllObject<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_Compatible>> = false;
const _IsAllObject_recordUnionSomeNumber: IsAllObject<Record<ObjectOrRecordKey, ObjectA> | number> = false;
const _IsAllObject_recordUnionSomeString: IsAllObject<Record<ObjectOrRecordKey, ObjectA> | string> = false;

const _IsAllRecord_object: IsAllRecord<ObjectA> = false;
const _IsAllRecord_objectUnion: IsAllRecord<ObjectA | ObjectA_C> = false;
const _IsAllRecord_tuple: IsAllRecord<[number]> = false;
const _IsAllRecord_tupleUnion: IsAllRecord<[number] | [string]> = false;
const _IsAllRecord_array: IsAllRecord<number[]> = false;
const _IsAllRecord_arrayUnion: IsAllRecord<number[] | string[]> = false;
const _IsAllRecord_readonlyArray: IsAllRecord<readonly number[]> = false;
const _IsAllRecord_readonlyArrayUnion: IsAllRecord<readonly number[] | readonly string[]> = false;
const _IsAllRecord_mixedArrayUnion: IsAllRecord<number[] | readonly string[]> = false;
const _IsAllRecord_mixedArrayUnion2: IsAllRecord<number | string[]> = false;
const _IsAllRecord_record: IsAllRecord<Record<ObjectOrRecordKey, any>> = true;
const _IsAllRecord_recordUnionAll: IsAllRecord<Record<string, ObjectA> | Record<string, ObjectA_C>> = true;
const _IsAllRecord_recordUnionCompatible: IsAllRecord<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_Compatible>> = true;
const _IsAllRecord_recordUnionSomeNumber: IsAllRecord<Record<ObjectOrRecordKey, ObjectA> | number> = false;
const _IsAllRecord_recordUnionSomeString: IsAllRecord<Record<ObjectOrRecordKey, ObjectA> | string> = false;

const _AsArray_object: IsExact<AsArray<ObjectA>, never> = true;
const _AsArray_objectUnion: IsExact<AsArray<ObjectA | ObjectA_C>, never> = true;
const _AsArray_objectUnionMixedNumber: IsExact<AsArray<ObjectA | number>, never> = true;
const _AsArray_objectUnionMixedString: IsExact<AsArray<ObjectA | string[]>, string[]> = true;
const _AsArray_tuple: IsExact<AsArray<[number]>, [number]> = true;
const _AsArray_tupleUnion: IsExact<AsArray<[number] | [string]>, [number] | [string]> = true;
const _AsArray_array: IsExact<AsArray<number[]>, number[]> = true;
const _AsArray_arrayUnion: IsExact<AsArray<number[] | string[]>, number[] | string[]> = true;
const _AsArray_readonlyArray: IsExact<AsArray<readonly number[]>, readonly number[]> = true;
const _AsArray_readonlyArrayUnion: IsExact<AsArray<readonly number[] | readonly string[]>, readonly number[] | readonly string[]> = true;
const _AsArray_mixedArrayUnion: IsExact<AsArray<number[] | readonly string[]>, number[] | readonly string[]> = true;
const _AsArray_mixedArrayUnion2: IsExact<AsArray<number | string[]>, string[]> = true;
const _AsArray_record: IsExact<AsArray<Record<ObjectOrRecordKey, any>>, never> = true;
const _AsArray_recordUnionAll: IsExact<AsArray<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_C>>, never> = true;
const _AsArray_recordUnionCompatible: IsExact<AsArray<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_Compatible>>, never> = true;
const _AsArray_recordUnionSomeNumber: IsExact<AsArray<Record<ObjectOrRecordKey, ObjectA> | number[]>, number[]> = true;
const _AsArray_recordUnionSomeString: IsExact<AsArray<Record<ObjectOrRecordKey, ObjectA> | string[]>, string[]> = true;

const _IsValid_any: IsValid<any> = false;
const _IsValid_boolean: IsValid<boolean> = false;
const _IsValid_primitiveUnion: IsValid<boolean | string> = false;
const _IsValid_undefined: IsValid<undefined> = false;
const _IsValid_unknown: IsValid<unknown> = false;
const _IsValid_never: IsValid<never> = false;
const _IsValid_plainObject: IsValid<object> = false;
const _IsValid_emptyObject: IsValid<{}> = false;
const _IsValid_emptyTuple: IsValid<[]> = false;

const _IsValid_anyMixed: IsValid<any | string[]> = false;
const _IsValid_booleanMixed: IsValid<boolean | string[]> = false;
const _IsValid_primitiveUnionMixed: IsValid<boolean | string | string[]> = false;
const _IsValid_undefinedMixed: IsValid<undefined | string[]> = false;
const _IsValid_unknownMixed: IsValid<unknown | string[]> = false;
const _IsValid_plainObjectMixed: IsValid<object | string[]> = false;
const _IsValid_emptyObjectMixed: IsValid<{} | string[]> = false;
const _IsValid_emptyTupleMixed: IsValid<[] | string[]> = false;

const _IsValid_object: IsValid<ObjectA> = true;
const _IsValid_objectUnion: IsValid<ObjectA | ObjectA_C> = true;
const _IsValid_objectUnionMixedNumber: IsValid<ObjectA | number> = false;
const _IsValid_objectUnionMixedString: IsValid<ObjectA | string> = false;
const _IsValid_tuple: IsValid<[number]> = true;
const _IsValid_tupleUnion: IsValid<[number] | [string]> = true;
const _IsValid_array: IsValid<number[]> = true;
const _IsValid_arrayUnion: IsValid<number[] | string[]> = true;
const _IsValid_readonlyArray: IsValid<readonly number[]> = true;
const _IsValid_readonlyArrayUnion: IsValid<readonly number[] | readonly string[]> = true;
const _IsValid_mixedArrayUnion: IsValid<number[] | readonly string[]> = true;
const _IsValid_mixedArrayUnion2: IsValid<number | string[]> = false;
const _IsValid_record: IsValid<Record<ObjectOrRecordKey, any>> = true;
const _IsValid_recordUnionAll: IsValid<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_C>> = true;
const _IsValid_recordUnionCompatible: IsValid<Record<ObjectOrRecordKey, ObjectA> | Record<ObjectOrRecordKey, ObjectA_Compatible>> = true;
const _IsValid_recordUnionSomeNumber: IsValid<Record<ObjectOrRecordKey, ObjectA> | number> = false;
const _IsValid_recordUnionSomeString: IsValid<Record<ObjectOrRecordKey, ObjectA> | string> = false;

const _Keys_object: IsExact<Keys<ObjectA>, 'a' | 'x'> = true;
const _Keys_record: IsExact<Keys<Record<string, string>>, string> = true;

const _Values_object: IsExact<Values<ObjectA, 'a'>, string> = true;
const _Values_record: IsExact<Values<Record<string, string>, 'a'>, string> = true;

const _ArrayRest_array: IsExact<ArrayRest<number[]>, number> = true;
const _ArrayRest_arrayUnion: IsExact<ArrayRest<number[] | string[]>, number | string> = true;
const _ArrayRest_tupleNoRest: IsExact<ArrayRest<[number]>, never> = true;
const _ArrayRest_tupleNoRestUnion: IsExact<ArrayRest<[number] | [string]>, never> = true;
const _ArrayRest_tuple: IsExact<ArrayRest<[...number[]]>, number> = true;
const _ArrayRest_tupleUnion: IsExact<ArrayRest<[...number[]] | [...string[]]>, number | string> = true;
const _ArrayRest_tupleWithFixed: IsExact<ArrayRest<[string, boolean, ...number[]]>, number> = true;
const _ArrayRest_tupleWithFixedUnion: IsExact<ArrayRest<[string, boolean, ...number[]] | [boolean, ...string[]]>, number | string> = true;
const _ArrayRest_tupleWithNestedArrayRest: IsExact<ArrayRest<[string, boolean, ...number[][]]>, number[]> = true;

const _HasArrayRest1: IsExact<HasArrayRest<[]>, false> = true;
const _HasArrayRest2: IsExact<HasArrayRest<[string]>, false> = true;
const _HasArrayRest3: IsExact<HasArrayRest<string[]>, true> = true;

const _ArrayFixed_array: IsExact<ArrayFixed<number[]>, []> = true;
const _ArrayFixed_tuple1: IsExact<ArrayFixed<[number]>, [number]> = true;
const _ArrayFixed_tuple2: IsExact<ArrayFixed<[string, number]>, [string, number]> = true;
const _ArrayFixed_tupleOnlyRest: IsExact<ArrayFixed<[...number[]]>, []> = true;
const _ArrayFixed_tupleFixedAndRest: IsExact<ArrayFixed<[string, boolean, ...number[]]>, [string, boolean]> = true;

const _ArrayLengthWithoutRest_array: IsExact<ArrayLengthWithoutRest<number[]>, 0> = true;
const _ArrayLengthWithoutRest_arrayUnion: IsExact<ArrayLengthWithoutRest<number[] | string[]>, 0> = true;
const _ArrayLengthWithoutRest_arrayTupleUnion: IsExact<ArrayLengthWithoutRest<number[] | [string]>, 0 | 1> = true;

const _ArrayLengthWithoutRest_tupleNoRest: IsExact<ArrayLengthWithoutRest<[number]>, 1> = true;
const _ArrayLengthWithoutRest_tupleNoRestUnion: IsExact<ArrayLengthWithoutRest<[number] | [string]>, 1> = true;
const _ArrayLengthWithoutRest_tuple: IsExact<ArrayLengthWithoutRest<[...number[]]>, 0> = true;
const _ArrayLengthWithoutRest_tupleUnion: IsExact<ArrayLengthWithoutRest<[...number[]] | [...string[]]>, 0> = true;
const _ArrayLengthWithoutRest_tupleWithFixed: IsExact<ArrayLengthWithoutRest<[string, boolean, ...number[]]>, 2> = true;
const _ArrayLengthWithoutRest_tupleWithFixedUnion: IsExact<ArrayLengthWithoutRest<[string, boolean, ...number[]] | [boolean, ...string[]]>, 1 | 2> = true;

const _AsRequiredKeys_record: IsExact<AsRequiredKeys<Record<string, string>, {}>, never> = true;
const _AsRequiredKeys_recordKey: IsExact<AsRequiredKeys<Record<ObjectOrRecordKey, string>, {}>, never> = true;
const _AsRequiredKeys_recordUnion: IsExact<AsRequiredKeys<Record<string, string> | Record<string, number>, {}>, never> = true;
const _AsRequiredKeys_object: IsExact<AsRequiredKeys<ObjectA, {}>, 'a' | 'x'> = true;
const _AsRequiredKeys_objectUnionDifferent: IsExact<AsRequiredKeys<ObjectA | ObjectA_C, {}>, 'a' | 'c' | 'x'> = true;
const _AsRequiredKeys_objectUnionCompatible: IsExact<AsRequiredKeys<ObjectA | ObjectA_Compatible, {}>, 'a' | 'x'> = true;
const _AsRequiredKeys_objectUnionIncompatible: IsExact<AsRequiredKeys<ObjectA | ObjectA_Array, {}>, 'a' | 'x' | 'z'> = true;
const _AsRequiredKeys_object_pruned: IsExact<AsRequiredKeys<ObjectA, ObjectA>, never> = true;
const _AsRequiredKeys_objectUnionDifferent_pruned: IsExact<AsRequiredKeys<ObjectA | ObjectA_C, ObjectA>, never> = true;
const _AsRequiredKeys_objectUnionCompatible_pruned: IsExact<AsRequiredKeys<ObjectA | ObjectA_Compatible, ObjectA>, never> = true;
const _AsRequiredKeys_objectUnionIncompatible_pruned: IsExact<AsRequiredKeys<ObjectA | ObjectA_Array, ObjectA>, never> = true;

const _UnusedName_used: IsExact<UnusedName<{ tom: '' }, 'tom'>, never> = true;
const _UnusedName_unused: IsExact<UnusedName<{ tom: '' }, 'tim'>, 'tim'> = true;

const _IsPartialMatch_exact: IsExact<IsPartialMatch<ObjectA, ObjectA>, true> = true;
const _IsPartialMatch_none: IsExact<IsPartialMatch<ObjectA, {}>, true> = true;
const _IsPartialMatch_incompatible: IsExact<IsPartialMatch<ObjectA, ObjectA_Incompatible>, false> = true;
const _IsPartialMatch_incompatibleExpanded: IsExact<IsPartialMatch<ObjectA, ObjectA_C>, false> = true;
const _IsPartialMatch_compatibleExpanded: IsExact<IsPartialMatch<ObjectA_Restricted, ObjectA>, false> = true;
const _IsPartialMatch_compatibleRestricted: IsExact<IsPartialMatch<ObjectA, ObjectA_Restricted>, true> = true;
const _IsPartialMatch_compatibleRestrictedCollapsed: IsExact<IsPartialMatch<ObjectA_Compatible, ObjectA>, true> = true;

const _FilterByPartial_exact: IsExact<FilterByPartial<ObjectA, ObjectA>, ObjectA> = true;
const _FilterByPartial_none: IsExact<FilterByPartial<ObjectA, {}>, ObjectA> = true;
const _FilterByPartial_incompatible: IsExact<FilterByPartial<ObjectA, ObjectA_C>, never> = true;
const _FilterByPartial_compatibleExpanded: IsExact<FilterByPartial<ObjectA, ObjectA_Compatible>, never> = true;
const _FilterByPartial_compatibleRestricted: IsExact<FilterByPartial<ObjectA_Compatible, ObjectA>, ObjectA_Compatible> = true;
const _FilterByPartial_compatibleRestrictedCollapsed: IsExact<FilterByPartial<ObjectA_Compatible, ObjectA>, ObjectA> = true;

const _AllUnionMembersAreIdentical_one: AllUnionMembersAreIdentical<string> = true;
const _AllUnionMembersAreIdentical_same: AllUnionMembersAreIdentical<string | string> = true;
const _AllUnionMembersAreIdentical_different: AllUnionMembersAreIdentical<string | number> = false;
