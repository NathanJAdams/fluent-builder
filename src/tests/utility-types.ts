import { AllUnionMembersAreIdentical, ArrayLengthWithoutRest, ArrayRest, ArrayValues, AsRequiredKeys, BuildType, FilterByPartial, FindBuildTypeApi, FindBuildTypeDistributed, IsArray, IsExact, IsIgnored, IsObject, IsRecord, IsUnion, IsValid, Keys, UnusedName, Values } from '../utility-types';

type ObjectA = { a: string; x: boolean; };
type ObjectA_Array = { a: string[]; z: boolean; };
type ObjectA_OptionalArray = { a?: string[]; };
type ObjectA_Compatible = { a: string; x: boolean; b?: number; };
type ObjectA_C = { a: string; c: boolean; };

const _IsIgnored_any: IsIgnored<any> = true;
const _IsIgnored_anyMixed: IsIgnored<any | string[]> = true;
const _IsIgnored_undefined: IsIgnored<undefined> = true;
const _IsIgnored_undefinedMixed: IsIgnored<undefined | string[]> = true;
const _IsIgnored_unknown: IsIgnored<unknown> = true;
const _IsIgnored_unknownMixed: IsIgnored<unknown | string[]> = true;
const _IsIgnored_never: IsIgnored<never> = true;
const _IsIgnored_plainObject: IsIgnored<object> = true;
const _IsIgnored_plainObjectMixed: IsIgnored<object | string[]> = true;
const _IsIgnored_emptyObject: IsIgnored<{}> = true;
const _IsIgnored_emptyObjectMixed: IsIgnored<{} | string[]> = true;
const _IsIgnored_emptyTuple: IsIgnored<[]> = true;
const _IsIgnored_emptyTupleMixed: IsIgnored<[] | string[]> = true;

const _IsIgnored_boolean: IsIgnored<boolean> = false;
const _IsIgnored_booleanMixed: IsIgnored<boolean | string[]> = false;
const _IsIgnored_primitiveUnion: IsIgnored<boolean | string> = false;
const _IsIgnored_primitiveUnionMixed: IsIgnored<boolean | string | string[]> = false;
const _IsIgnored_object: IsIgnored<ObjectA> = false;
const _IsIgnored_objectUnion: IsIgnored<ObjectA | ObjectA_C> = false;
const _IsIgnored_objectUnionMixedNumber: IsIgnored<ObjectA | number> = false;
const _IsIgnored_objectUnionMixedString: IsIgnored<ObjectA | string> = false;
const _IsIgnored_tuple: IsIgnored<[number]> = false;
const _IsIgnored_tupleUnion: IsIgnored<[number] | [string]> = false;
const _IsIgnored_array: IsIgnored<number[]> = false;
const _IsIgnored_arrayUnion: IsIgnored<number[] | string[]> = false;
const _IsIgnored_readonlyArray: IsIgnored<readonly number[]> = false;
const _IsIgnored_readonlyArrayUnion: IsIgnored<readonly number[] | readonly string[]> = false;
const _IsIgnored_mixedArrayUnion: IsIgnored<number[] | readonly string[]> = false;
const _IsIgnored_mixedArrayUnion2: IsIgnored<number | string[]> = false;
const _IsIgnored_record: IsIgnored<Record<PropertyKey, any>> = false;
const _IsIgnored_recordUnionAll: IsIgnored<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>> = false;
const _IsIgnored_recordUnionCompatible: IsIgnored<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>> = false;
const _IsIgnored_recordUnionSomeNumber: IsIgnored<Record<PropertyKey, ObjectA> | number> = false;
const _IsIgnored_recordUnionSomeString: IsIgnored<Record<PropertyKey, ObjectA> | string> = false;

const _IsUnion_object: IsUnion<ObjectA> = false;
const _IsUnion_objectUnion: IsUnion<ObjectA | ObjectA_C> = true;
const _IsUnion_objectUnionMixedNumber: IsUnion<ObjectA | number> = true;
const _IsUnion_objectUnionMixedString: IsUnion<ObjectA | string> = true;
const _IsUnion_tuple: IsUnion<[number]> = false;
const _IsUnion_tupleUnion: IsUnion<[number] | [string]> = true;
const _IsUnion_array: IsUnion<number[]> = false;
const _IsUnion_arrayUnion: IsUnion<number[] | string[]> = true;
const _IsUnion_readonlyArray: IsUnion<readonly number[]> = false;
const _IsUnion_readonlyArrayUnion: IsUnion<readonly number[] | readonly string[]> = true;
const _IsUnion_record: IsUnion<Record<PropertyKey, any>> = false;
const _IsUnion_recordUnionAll: IsUnion<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>> = true;
// @ts-expect-error Expected to fail as typescript collapses compatible types before IsUnion even sees it
const _IsUnion_recordUnionCompatible: IsUnion<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>> = true;
const _IsUnion_recordUnionSomeNumber: IsUnion<Record<PropertyKey, ObjectA> | number> = true;
const _IsUnion_recordUnionSomeString: IsUnion<Record<PropertyKey, ObjectA> | string> = true;

const _IsArray_object: IsArray<ObjectA> = false;
const _IsArray_objectUnion: IsArray<ObjectA | ObjectA_C> = false;
const _IsArray_objectUnionMixedNumber: IsArray<ObjectA | number> = false;
const _IsArray_objectUnionMixedString: IsArray<ObjectA | string[]> = false;
const _IsArray_tuple: IsArray<[number]> = true;
const _IsArray_tupleUnion: IsArray<[number] | [string]> = true;
const _IsArray_array: IsArray<number[]> = true;
const _IsArray_arrayUnion: IsArray<number[] | string[]> = true;
const _IsArray_readonlyArray: IsArray<readonly number[]> = true;
const _IsArray_readonlyArrayUnion: IsArray<readonly number[] | readonly string[]> = true;
const _IsArray_mixedArrayUnion: IsArray<number[] | readonly string[]> = true;
const _IsArray_mixedArrayUnion2: IsArray<number | string[]> = false;
const _IsArray_record: IsArray<Record<PropertyKey, any>> = false;
const _IsArray_recordUnionAll: IsArray<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>> = false;
const _IsArray_recordUnionCompatible: IsArray<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>> = false;
const _IsArray_recordUnionSomeNumber: IsArray<Record<PropertyKey, ObjectA> | number[]> = false;
const _IsArray_recordUnionSomeString: IsArray<Record<PropertyKey, ObjectA> | string[]> = false;

const _IsObject_object: IsObject<ObjectA> = true;
const _IsObject_objectUnion: IsObject<ObjectA | ObjectA_C> = true;
const _IsObject_objectUnionMixedNumber: IsObject<ObjectA | number> = false;
const _IsObject_objectUnionMixedString: IsObject<ObjectA | string> = false;
const _IsObject_tuple: IsObject<[number]> = false;
const _IsObject_tupleUnion: IsObject<[number] | [string]> = false;
const _IsObject_array: IsObject<number[]> = false;
const _IsObject_arrayUnion: IsObject<number[] | string[]> = false;
const _IsObject_readonlyArray: IsObject<readonly number[]> = false;
const _IsObject_readonlyArrayUnion: IsObject<readonly number[] | readonly string[]> = false;
const _IsObject_mixedArrayUnion: IsObject<number[] | readonly string[]> = false;
const _IsObject_mixedArrayUnion2: IsArray<number | string[]> = false;
const _IsObject_record: IsObject<Record<PropertyKey, any>> = false;
const _IsObject_recordUnionAll: IsObject<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>> = false;
const _IsObject_recordUnionCompatible: IsObject<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>> = false;
const _IsObject_recordUnionSomeNumber: IsObject<Record<PropertyKey, ObjectA> | number> = false;
const _IsObject_recordUnionSomeString: IsObject<Record<PropertyKey, ObjectA> | string> = false;

const _IsRecord_object: IsRecord<ObjectA> = false;
const _IsRecord_objectUnion: IsRecord<ObjectA | ObjectA_C> = false;
const _IsRecord_tuple: IsRecord<[number]> = false;
const _IsRecord_tupleUnion: IsRecord<[number] | [string]> = false;
const _IsRecord_array: IsRecord<number[]> = false;
const _IsRecord_arrayUnion: IsRecord<number[] | string[]> = false;
const _IsRecord_readonlyArray: IsRecord<readonly number[]> = false;
const _IsRecord_readonlyArrayUnion: IsRecord<readonly number[] | readonly string[]> = false;
const _IsRecord_mixedArrayUnion: IsRecord<number[] | readonly string[]> = false;
const _IsRecord_mixedArrayUnion2: IsArray<number | string[]> = false;
const _IsRecord_record: IsRecord<Record<PropertyKey, any>> = true;
const _IsRecord_recordUnionAll: IsRecord<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>> = true;
const _IsRecord_recordUnionCompatible: IsRecord<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>> = true;
const _IsRecord_recordUnionSomeNumber: IsRecord<Record<PropertyKey, ObjectA> | number> = false;
const _IsRecord_recordUnionSomeString: IsRecord<Record<PropertyKey, ObjectA> | string> = false;

const _IsValid_any: IsValid<any> = false;
const _IsValid_boolean: IsValid<boolean> = false;
const _IsValid_primitiveUnion: IsValid<boolean | string> = false;
const _IsValid_undefined: IsValid<undefined> = false;
const _IsValid_unknown: IsValid<unknown> = false;
const _IsValid_never: IsValid<never> = false;
const _IsValid_plainObject: IsValid<object> = false;
const _IsValid_emptyObject: IsValid<{}> = false;
const _IsValid_emptyTuple: IsValid<[]> = false;

const _IsValid_anyMixed: IsValid<any | string[]> = false;
const _IsValid_booleanMixed: IsValid<boolean | string[]> = false;
const _IsValid_primitiveUnionMixed: IsValid<boolean | string | string[]> = false;
const _IsValid_undefinedMixed: IsValid<undefined | string[]> = false;
const _IsValid_unknownMixed: IsValid<unknown | string[]> = false;
const _IsValid_plainObjectMixed: IsValid<object | string[]> = false;
const _IsValid_emptyObjectMixed: IsValid<{} | string[]> = false;
const _IsValid_emptyTupleMixed: IsValid<[] | string[]> = false;

const _IsValid_object: IsValid<ObjectA> = true;
const _IsValid_objectUnion: IsValid<ObjectA | ObjectA_C> = true;
const _IsValid_objectUnionMixedNumber: IsValid<ObjectA | number> = false;
const _IsValid_objectUnionMixedString: IsValid<ObjectA | string> = false;
const _IsValid_tuple: IsValid<[number]> = true;
const _IsValid_tupleUnion: IsValid<[number] | [string]> = true;
const _IsValid_array: IsValid<number[]> = true;
const _IsValid_arrayUnion: IsValid<number[] | string[]> = true;
const _IsValid_readonlyArray: IsValid<readonly number[]> = true;
const _IsValid_readonlyArrayUnion: IsValid<readonly number[] | readonly string[]> = true;
const _IsValid_mixedArrayUnion: IsValid<number[] | readonly string[]> = true;
const _IsValid_mixedArrayUnion2: IsValid<number | string[]> = false;
const _IsValid_record: IsValid<Record<PropertyKey, any>> = true;
const _IsValid_recordUnionAll: IsValid<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>> = true;
const _IsValid_recordUnionCompatible: IsValid<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>> = true;
const _IsValid_recordUnionSomeNumber: IsValid<Record<PropertyKey, ObjectA> | number> = false;
const _IsValid_recordUnionSomeString: IsValid<Record<PropertyKey, ObjectA> | string> = false;

const _Keys_object: IsExact<Keys<ObjectA>, 'a' | 'x'> = true;
const _Keys_record: IsExact<Keys<Record<string, string>>, string> = true;

const _Values_object: IsExact<Values<ObjectA, 'a'>, string> = true;
const _Values_record: IsExact<Values<Record<string, string>, 'a'>, string> = true;

const _ArrayValues_wrongField: IsExact<ArrayValues<ObjectA_Array, 'b'>, never> = true;
const _ArrayValues_optionalArray: IsExact<ArrayValues<ObjectA_OptionalArray, 'a'>, string[] | undefined> = true;
const _ArrayValues_array: IsExact<ArrayValues<ObjectA_Array, 'a'>, string[]> = true;
const _ArrayValues_notArray: IsExact<ArrayValues<ObjectA, 'a'>, never> = true;
const _ArrayValues_record: IsExact<ArrayValues<Record<string, string>, 'a'>, never> = true;

const _ArrayRest_array: IsExact<ArrayRest<number[]>, number> = true;
const _ArrayRest_arrayUnion: IsExact<ArrayRest<number[] | string[]>, number | string> = true;
const _ArrayRest_tupleNoRest: IsExact<ArrayRest<[number]>, never> = true;
const _ArrayRest_tupleNoRestUnion: IsExact<ArrayRest<[number] | [string]>, never> = true;
const _ArrayRest_tuple: IsExact<ArrayRest<[...number[]]>, number> = true;
const _ArrayRest_tupleUnion: IsExact<ArrayRest<[...number[]] | [...string[]]>, number | string> = true;
const _ArrayRest_tupleWithFixed: IsExact<ArrayRest<[string, boolean, ...number[]]>, number> = true;
const _ArrayRest_tupleWithFixedUnion: IsExact<ArrayRest<[string, boolean, ...number[]] | [boolean, ...string[]]>, number | string> = true;
const _ArrayRest_tupleWithNestedArrayRest: IsExact<ArrayRest<[string, boolean, ...number[][]]>, number[]> = true;

const _ArrayLengthWithoutRest_array: IsExact<ArrayLengthWithoutRest<number[]>, 0> = true;
const _ArrayLengthWithoutRest_arrayUnion: IsExact<ArrayLengthWithoutRest<number[] | string[]>, 0> = true;
const _ArrayLengthWithoutRest_arrayTupleUnion: IsExact<ArrayLengthWithoutRest<number[] | [string]>, 0 | 1> = true;

const _ArrayLengthWithoutRest_tupleNoRest: IsExact<ArrayLengthWithoutRest<[number]>, 1> = true;
const _ArrayLengthWithoutRest_tupleNoRestUnion: IsExact<ArrayLengthWithoutRest<[number] | [string]>, 1> = true;
const _ArrayLengthWithoutRest_tuple: IsExact<ArrayLengthWithoutRest<[...number[]]>, 0> = true;
const _ArrayLengthWithoutRest_tupleUnion: IsExact<ArrayLengthWithoutRest<[...number[]] | [...string[]]>, 0> = true;
const _ArrayLengthWithoutRest_tupleWithFixed: IsExact<ArrayLengthWithoutRest<[string, boolean, ...number[]]>, 2> = true;
const _ArrayLengthWithoutRest_tupleWithFixedUnion: IsExact<ArrayLengthWithoutRest<[string, boolean, ...number[]] | [boolean, ...string[]]>, 1 | 2> = true;

const _AsRequiredKeys_record: IsExact<AsRequiredKeys<Record<string, string>, {}>, never> = true;
const _AsRequiredKeys_recordUnion: IsExact<AsRequiredKeys<Record<string, string> | Record<string, number>, {}>, never> = true;
const _AsRequiredKeys_object: IsExact<AsRequiredKeys<ObjectA, {}>, 'a' | 'x'> = true;
const _AsRequiredKeys_objectUnionDifferent: IsExact<AsRequiredKeys<ObjectA | ObjectA_C, {}>, 'a' | 'c' | 'x'> = true;
const _AsRequiredKeys_objectUnionCompatible: IsExact<AsRequiredKeys<ObjectA | ObjectA_Compatible, {}>, 'a' | 'x'> = true;
const _AsRequiredKeys_objectUnionIncompatible: IsExact<AsRequiredKeys<ObjectA | ObjectA_Array, {}>, 'a' | 'x' | 'z'> = true;
const _AsRequiredKeys_object_pruned: IsExact<AsRequiredKeys<ObjectA, ObjectA>, never> = true;
const _AsRequiredKeys_objectUnionDifferent_pruned: IsExact<AsRequiredKeys<ObjectA | ObjectA_C, ObjectA>, never> = true;
const _AsRequiredKeys_objectUnionCompatible_pruned: IsExact<AsRequiredKeys<ObjectA | ObjectA_Compatible, ObjectA>, never> = true;
const _AsRequiredKeys_objectUnionIncompatible_pruned: IsExact<AsRequiredKeys<ObjectA | ObjectA_Array, ObjectA>, never> = true;

const _UnusedName_used: IsExact<UnusedName<{ tom: '' }, 'tom'>, never> = true;
const _UnusedName_unused: IsExact<UnusedName<{ tom: '' }, 'tim'>, 'tim'> = true;

const _FilterByPartial_exact: IsExact<FilterByPartial<ObjectA, ObjectA>, ObjectA> = true;
const _FilterByPartial_none: IsExact<FilterByPartial<ObjectA, {}>, ObjectA> = true;
const _FilterByPartial_incompatible: IsExact<FilterByPartial<ObjectA, ObjectA_C>, never> = true;
const _FilterByPartial_compatibleExpanded: IsExact<FilterByPartial<ObjectA, ObjectA_Compatible>, never> = true;
const _FilterByPartial_compatibleRestricted: IsExact<FilterByPartial<ObjectA_Compatible, ObjectA>, ObjectA_Compatible> = true;
const _FilterByPartial_compatibleRestrictedCollapsed: IsExact<FilterByPartial<ObjectA_Compatible, ObjectA>, ObjectA> = true;

const _FindBuildTypeDistributed_any: IsExact<FindBuildTypeDistributed<any>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_anyMixed: IsExact<FindBuildTypeDistributed<any | string[]>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_undefined: IsExact<FindBuildTypeDistributed<undefined>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_undefinedMixed: IsExact<FindBuildTypeDistributed<undefined | string[]>, BuildType.NotValid | BuildType.Array> = true;
const _FindBuildTypeDistributed_unknown: IsExact<FindBuildTypeDistributed<unknown>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_unknownMixed: IsExact<FindBuildTypeDistributed<unknown | string[]>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_never: IsExact<FindBuildTypeDistributed<never>, never> = true;
const _FindBuildTypeDistributed_plainObject: IsExact<FindBuildTypeDistributed<object>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_plainObjectMixed: IsExact<FindBuildTypeDistributed<object | string[]>, BuildType.NotValid | BuildType.Array> = true;
const _FindBuildTypeDistributed_emptyObject: IsExact<FindBuildTypeDistributed<{}>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_emptyObjectMixed: IsExact<FindBuildTypeDistributed<{} | string[]>, BuildType.NotValid | BuildType.Array> = true;
const _FindBuildTypeDistributed_emptyTuple: IsExact<FindBuildTypeDistributed<[]>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_emptyTupleMixed: IsExact<FindBuildTypeDistributed<[] | string[]>, BuildType.NotValid | BuildType.Array> = true;
const _FindBuildTypeDistributed_boolean: IsExact<FindBuildTypeDistributed<boolean>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_booleanMixed: IsExact<FindBuildTypeDistributed<boolean | string[]>, BuildType.NotValid | BuildType.Array> = true;
const _FindBuildTypeDistributed_primitiveUnion: IsExact<FindBuildTypeDistributed<boolean | string>, BuildType.NotValid> = true;
const _FindBuildTypeDistributed_primitiveUnionMixed: IsExact<FindBuildTypeDistributed<boolean | string | string[]>, BuildType.NotValid | BuildType.Array> = true;
const _FindBuildTypeDistributed_object: IsExact<FindBuildTypeDistributed<ObjectA>, BuildType.Object> = true;
const _FindBuildTypeDistributed_objectUnion: IsExact<FindBuildTypeDistributed<ObjectA | ObjectA_C>, BuildType.Object> = true;
const _FindBuildTypeDistributed_objectUnionMixedNumber: IsExact<FindBuildTypeDistributed<ObjectA | number>, BuildType.Object | BuildType.NotValid> = true;
const _FindBuildTypeDistributed_objectUnionMixedString: IsExact<FindBuildTypeDistributed<ObjectA | string>, BuildType.Object | BuildType.NotValid> = true;
const _FindBuildTypeDistributed_tuple: IsExact<FindBuildTypeDistributed<[number]>, BuildType.Array> = true;
const _FindBuildTypeDistributed_tupleUnion: IsExact<FindBuildTypeDistributed<[number] | [string]>, BuildType.Array> = true;
const _FindBuildTypeDistributed_array: IsExact<FindBuildTypeDistributed<number[]>, BuildType.Array> = true;
const _FindBuildTypeDistributed_arrayUnion: IsExact<FindBuildTypeDistributed<number[] | string[]>, BuildType.Array> = true;
const _FindBuildTypeDistributed_readonlyArray: IsExact<FindBuildTypeDistributed<readonly number[]>, BuildType.Array> = true;
const _FindBuildTypeDistributed_readonlyArrayUnion: IsExact<FindBuildTypeDistributed<readonly number[] | readonly string[]>, BuildType.Array> = true;
const _FindBuildTypeDistributed_mixedArrayUnion: IsExact<FindBuildTypeDistributed<number[] | readonly string[]>, BuildType.Array> = true;
const _FindBuildTypeDistributed_mixedArrayUnion2: IsExact<FindBuildTypeDistributed<number | string[]>, BuildType.NotValid | BuildType.Array> = true;
const _FindBuildTypeDistributed_record: IsExact<FindBuildTypeDistributed<Record<PropertyKey, any>>, BuildType.Record> = true;
const _FindBuildTypeDistributed_recordUnionAll: IsExact<FindBuildTypeDistributed<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>>, BuildType.Record> = true;
const _FindBuildTypeDistributed_recordUnionCompatible: IsExact<FindBuildTypeDistributed<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>>, BuildType.Record> = true;
const _FindBuildTypeDistributed_recordUnionSomeNumber: IsExact<FindBuildTypeDistributed<Record<PropertyKey, ObjectA> | number>, BuildType.Record | BuildType.NotValid> = true;
const _FindBuildTypeDistributed_recordUnionSomeString: IsExact<FindBuildTypeDistributed<Record<PropertyKey, ObjectA> | string>, BuildType.Record | BuildType.NotValid> = true;
const _FindBuildTypeDistributed_recordUnionMixedArray: IsExact<FindBuildTypeDistributed<Record<PropertyKey, ObjectA> | string[]>, BuildType.Record | BuildType.Array> = true;
const _FindBuildTypeDistributed_recordUnionMixedObject: IsExact<FindBuildTypeDistributed<Record<PropertyKey, ObjectA> | ObjectA>, BuildType.Record | BuildType.Object> = true;

const _FindBuildType_any: IsExact<FindBuildTypeApi<any>, BuildType.NotValid> = true;
const _FindBuildType_anyMixed: IsExact<FindBuildTypeApi<any | string[]>, BuildType.NotValid> = true;
const _FindBuildType_undefined: IsExact<FindBuildTypeApi<undefined>, BuildType.NotValid> = true;
const _FindBuildType_undefinedMixed: IsExact<FindBuildTypeApi<undefined | string[]>, BuildType.NotConsistent> = true;
const _FindBuildType_unknown: IsExact<FindBuildTypeApi<unknown>, BuildType.NotValid> = true;
const _FindBuildType_unknownMixed: IsExact<FindBuildTypeApi<unknown | string[]>, BuildType.NotValid> = true;
const _FindBuildType_never: IsExact<FindBuildTypeApi<never>, BuildType.NotValid> = true;
const _FindBuildType_plainObject: IsExact<FindBuildTypeApi<object>, BuildType.NotValid> = true;
const _FindBuildType_plainObjectMixed: IsExact<FindBuildTypeApi<object | string[]>, BuildType.NotConsistent> = true;
const _FindBuildType_emptyObject: IsExact<FindBuildTypeApi<{}>, BuildType.NotValid> = true;
const _FindBuildType_emptyObjectMixed: IsExact<FindBuildTypeApi<{} | string[]>, BuildType.NotConsistent> = true;
const _FindBuildType_emptyTuple: IsExact<FindBuildTypeApi<[]>, BuildType.NotValid> = true;
const _FindBuildType_emptyTupleMixed: IsExact<FindBuildTypeApi<[] | string[]>, BuildType.NotConsistent> = true;
const _FindBuildType_boolean: IsExact<FindBuildTypeApi<boolean>, BuildType.NotValid> = true;
const _FindBuildType_booleanMixed: IsExact<FindBuildTypeApi<boolean | string[]>, BuildType.NotConsistent> = true;
const _FindBuildType_primitiveUnion: IsExact<FindBuildTypeApi<boolean | string>, BuildType.NotValid> = true;
const _FindBuildType_primitiveUnionMixed: IsExact<FindBuildTypeApi<boolean | string | string[]>, BuildType.NotConsistent> = true;
const _FindBuildType_object: IsExact<FindBuildTypeApi<ObjectA>, BuildType.Object> = true;
const _FindBuildType_objectUnion: IsExact<FindBuildTypeApi<ObjectA | ObjectA_C>, BuildType.Object> = true;
const _FindBuildType_objectUnionMixedNumber: IsExact<FindBuildTypeApi<ObjectA | number>, BuildType.NotConsistent> = true;
const _FindBuildType_objectUnionMixedString: IsExact<FindBuildTypeApi<ObjectA | string>, BuildType.NotConsistent> = true;
const _FindBuildType_tuple: IsExact<FindBuildTypeApi<[number]>, BuildType.Array> = true;
const _FindBuildType_tupleUnion: IsExact<FindBuildTypeApi<[number] | [string]>, BuildType.Array> = true;
const _FindBuildType_array: IsExact<FindBuildTypeApi<number[]>, BuildType.Array> = true;
const _FindBuildType_arrayUnion: IsExact<FindBuildTypeApi<number[] | string[]>, BuildType.Array> = true;
const _FindBuildType_readonlyArray: IsExact<FindBuildTypeApi<readonly number[]>, BuildType.Array> = true;
const _FindBuildType_readonlyArrayUnion: IsExact<FindBuildTypeApi<readonly number[] | readonly string[]>, BuildType.Array> = true;
const _FindBuildType_mixedArrayUnion: IsExact<FindBuildTypeApi<number[] | readonly string[]>, BuildType.Array> = true;
const _FindBuildType_mixedArrayUnion2: IsExact<FindBuildTypeApi<number | string[]>, BuildType.NotConsistent> = true;
const _FindBuildType_record: IsExact<FindBuildTypeApi<Record<PropertyKey, any>>, BuildType.Record> = true;
const _FindBuildType_recordUnionAll: IsExact<FindBuildTypeApi<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_C>>, BuildType.Record> = true;
const _FindBuildType_recordUnionCompatible: IsExact<FindBuildTypeApi<Record<PropertyKey, ObjectA> | Record<PropertyKey, ObjectA_Compatible>>, BuildType.Record> = true;
const _FindBuildType_recordUnionSomeNumber: IsExact<FindBuildTypeApi<Record<PropertyKey, ObjectA> | number>, BuildType.NotConsistent> = true;
const _FindBuildType_recordUnionSomeString: IsExact<FindBuildTypeApi<Record<PropertyKey, ObjectA> | string>, BuildType.NotConsistent> = true;

const _AllUnionMembersAreIdentical_one: AllUnionMembersAreIdentical<string> = true;
const _AllUnionMembersAreIdentical_same: AllUnionMembersAreIdentical<string | string> = true;
const _AllUnionMembersAreIdentical_different: AllUnionMembersAreIdentical<string | number> = false;
